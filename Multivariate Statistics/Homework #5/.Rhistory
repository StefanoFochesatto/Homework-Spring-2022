summary(out)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('Rplot02.png')
knitr::include_graphics('Rplot02.png')
X <- as.matrix(dat[,2:6])
one <- matrix(ncol=1, rep(1,49))
(1/49)*t(one)%*%X
XC <-     X - (1/49)*one%*%t(one)%*%X
covar <- (1/(49-1))*t(XC)%*%XC
X
one
(1/49)*t(one)%*%X
XC
covar
(1/49)*t(one)%*%X
covar <- (1/(49-1))*t(XC)%*%XC
knitr::opts_chunk$set(echo = TRUE)
text <- textConnection(
"ID X1 X2 X3 X4 X5
01 156 245 31.6 18.5 20.5
02 154 240 30.4 17.9 19.6
03 153 240 31.0 18.4 20.6
04 153 236 30.9 17.7 20.2
05 155 243 31.5 18.6 20.3
06 163 247 32.0 19.0 20.9
07 157 238 30.9 18.4 20.2
08 155 239 32.8 18.6 21.2
09 164 248 32.7 19.1 21.1
10 158 238 31.0 18.8 22.0
11 158 240 31.3 18.6 22.0
12 160 244 31.1 18.6 20.5
13 161 246 32.3 19.3 21.8
14 157 245 32.0 19.1 20.0
15 157 235 31.5 18.1 19.8
16 156 237 30.9 18.0 20.3
17 158 244 31.4 18.5 21.6
18 153 238 30.5 18.2 20.9
19 155 236 30.3 18.5 20.1
20 163 246 32.5 18.6 21.9
21 159 236 31.5 18.0 21.5
22 155 240 31.4 18.0 20.7
23 156 240 31.5 18.2 20.6
24 160 242 32.6 18.8 21.7
25 152 232 30.3 17.2 19.8
26 160 250 31.7 18.8 22.5
27 155 237 31.0 18.5 20.0
28 157 245 32.2 19.5 21.4
29 165 245 33.1 19.8 22.7
30 153 231 30.1 17.3 19.8
31 162 239 30.3 18.0 23.1
32 162 243 31.6 18.8 21.3
33 159 245 31.8 18.5 21.7
34 159 247 30.9 18.1 19.0
35 155 243 30.9 18.5 21.3
36 162 252 31.9 19.1 22.2
37 152 230 30.4 17.3 18.6
38 159 242 30.8 18.2 20.5
39 155 238 31.2 17.9 19.3
40 163 249 33.4 19.5 22.8
41 163 242 31.0 18.1 20.7
42 156 237 31.7 18.2 20.3
43 159 238 31.5 18.4 20.3
44 161 245 32.1 19.1 20.8
45 155 235 30.7 17.7 19.6
46 162 247 31.9 19.1 20.4
47 153 237 30.6 18.6 20.4
48 162 245 32.5 18.5 21.1
49 164 248 32.3 18.8 20.9")
dat <- read.delim(text, header=TRUE, sep="")
colnames(dat) <- c("LineNum", "Total", "Alar", "Beak", "Humerus", "Keel")
class(dat); dim(dat)
head(dat)
knitr::include_graphics('Rplot05.png')
summary(dat[,c(2:6)])
cor(dat[,c(2:6)])
cov(dat[,c(2:6)])
knitr::include_graphics('Rplot.png')
knitr::include_graphics('Rplot01.png')
knitr::include_graphics('Rplot02.png')
out <- lm(dat$Total ~ dat$Alar)
summary(out)
(1/49)*t(one)%*%X
## Turn our data frame into a matrix object
X <- as.matrix(dat[,2:6])
## Initialize an identity vector
one <- matrix(ncol=1, rep(1,49))
## Computing Column means
(1/49)*t(one)%*%X
## Centering our data by their column means
XC <-  X - (1/49)*one%*%t(one)%*%X
## Computing covariance matrix
covar <- (1/(49-1))*t(XC)%*%XC
(1/49)*t(one)%*%X
covar <- (1/(49-1))*t(XC)%*%XC
(1/49)*t(one)%*%X;
(1/49)*t(one)%*%X:
)
(1/49)*t(one)%*%X;
invisible((1/49)*t(one)%*%X_;
invisible((1/49)*t(one)%*%X)
colMeans(dat[,2:6])
cov(colMeans(dat[,2:6]))
cov(dat[,2:6])
eigen(covar)
Gipperton <- structure(c(-14.3, -13.2, -14.5, -15.8, -15.4, -15.3, -15.2,
-14.9, 15.2, 15.2, 15.6, 16, 15.2, 15.8, 14.6, 14.3), .Dim = c(8L,
2L), .Dimnames = list(NULL, c("C", "N")))
PortPhillip <- structure(c(-13.4, -13.8, -13.8, -15.1, -15, -13.4, 15.5, 14.6,
18.5, 18.6, 17.8, 17), .Dim = c(6L, 2L), .Dimnames = list(NULL,
c("C2", "N2")))
#
#
Gipperton
PortPhillip
plot(Gipperton, pch=19, col=1, xlim=c(-16,-12), ylim=c(13,19))
points(PortPhillip, pch=19, col=2)
Gipperton
```{r, fig.height=4, fig.width=4}
Gipperton <- structure(c(-14.3, -13.2, -14.5, -15.8, -15.4, -15.3, -15.2,
-14.9, 15.2, 15.2, 15.6, 16, 15.2, 15.8, 14.6, 14.3), .Dim = c(8L,
2L), .Dimnames = list(NULL, c("C", "N")))
PortPhillip <- structure(c(-13.4, -13.8, -13.8, -15.1, -15, -13.4, 15.5, 14.6,
18.5, 18.6, 17.8, 17), .Dim = c(6L, 2L), .Dimnames = list(NULL,
c("C2", "N2")))
#
#
Gipperton
PortPhillip
plot(Gipperton, pch=19, col=1, xlim=c(-16,-12), ylim=c(13,19))
points(PortPhillip, pch=19, col=2)
```
GippertonMeans <- colMeans(Gipperton)
GippertonMeans
covarGipperton <- cov(Gipperton)
covarPortPHillip <- cov(PortPhillip)
GippertonMeans <- colMeans(Gipperton)
PortPhillipMeans <- colMeans(PortPhillipMeans)
Gipperton <- structure(c(-14.3, -13.2, -14.5, -15.8, -15.4, -15.3, -15.2,
-14.9, 15.2, 15.2, 15.6, 16, 15.2, 15.8, 14.6, 14.3), .Dim = c(8L,
2L), .Dimnames = list(NULL, c("C", "N")))
PortPhillip <- structure(c(-13.4, -13.8, -13.8, -15.1, -15, -13.4, 15.5, 14.6,
18.5, 18.6, 17.8, 17), .Dim = c(6L, 2L), .Dimnames = list(NULL,
c("C2", "N2")))
#
#
Gipperton
PortPhillip
plot(Gipperton, pch=19, col=1, xlim=c(-16,-12), ylim=c(13,19))
points(PortPhillip, pch=19, col=2)
GippertonMeans <- colMeans(Gipperton)
PortPhillipMeans <- colMeans(PortPhillipMeans)
GippertonMeans <- colMeans(Gipperton)
PortPhillipMeans <- colMeans(PortPhillip)
covarGipperton <- cov(Gipperton)
covarPortPhillip <- cov(PortPhillip)
(x1_bar - x2_bar)%*%solve(S_pool)%*%(x1_bar - x2_bar)*(n1*n2/n)
(GippertonMeans - PortPhillipMeans)%*%solve(covarGipperton)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
(GippertonMeans - PortPhillipMeans)%*%solve(covarGipperton)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
F <- T2*(14-2-1)/((14-2)*2)
T <- (GippertonMeans - PortPhillipMeans)%*%solve(covarGipperton)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
F <- T*(14-2-1)/((14-2)*2)
F
pf(F, df1=2, df2=11, lower.tail=FALSE)
library(Hotelling)
install.packages(Hotelling)
install.packages('Hotelling')
library(Hotelling)
install.packages('corpcor')
install.packages("corpcor")
library(Hotelling)
library(Hotelling)
hotelling.test(Gipperton,PortPhillip)$pval
knitr::opts_chunk$set(echo = TRUE)
covarPooled <- ((8-1)*covarGipperton + (6-1)*covarPortPhillip)/((6 + 8)-2)
(GippertonMeans - PortPhillipMeans)%*%solve(covarPooled)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
T <- (GippertonMeans - PortPhillipMeans)%*%solve(covarPooled)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
F <- T*(14-2-1)/((14-2)*2)
pf(F, df1=2, df2=11, lower.tail=FALSE)
T <- (GippertonMeans - PortPhillipMeans)%*%solve(covarPooled)%*%(GippertonMeans - PortPhillipMeans)*((8*6)/14)
F <- T*(14-2-1)/((14-2)*2)
pf(F, df1=2, df2=11, lower.tail=FALSE)
hotelling.test(Gipperton,PortPhillip)$pval
library(Hotelling)
hotelling.test(Gipperton,PortPhillip)$pval
library(Hotelling)
#
#  Get T2 statistic from original data
#
T2 <- hotelling.stat(Gipperton, PortPhillip)$statistic
T2
#
# Combine the data
#
X_comb <- rbind(Gipperton, PortPhillip)
#
#  Randomly split them into two groups of size 6 and 8, then compute stat
#
randomized_T2 <- rep(NA,2000)  # 2000 values to be simulated
for(i in 1:2000){
sample_row_index <- sample(1:14, size=6, replace=FALSE)
X1_temp <- X_comb[sample_row_index,]  # Sample 6 rows for X1_temp
X2_temp <- X_comb[-sample_row_index,] # Put the rest in X2_temp
randomized_T2[i] <- hotelling.stat(X1_temp, X2_temp)$statistic
}
hist(randomized_T2, n=30)
mean(randomized_T2 > T2)
library(Hotelling)
#
#  Get T2 statistic from original data
#
T2 <- hotelling.stat(Gipperton, PortPhillip)$statistic
T2
#
# Combine the data
#
X_comb <- rbind(Gipperton, PortPhillip)
#
#  Randomly split them into two groups of size 6 and 8, then compute stat
#
randomized_T2 <- rep(NA,2000)  # 2000 values to be simulated
for(i in 1:2000){
sample_row_index <- sample(1:14, size=6, replace=FALSE)
X1_temp <- X_comb[sample_row_index,]  # Sample 6 rows for X1_temp
X2_temp <- X_comb[-sample_row_index,] # Put the rest in X2_temp
randomized_T2[i] <- hotelling.stat(X1_temp, X2_temp)$statistic
}
hist(randomized_T2, n=30)
mean(randomized_T2 < T2)
hotelling.test(Gipperton,PortPhillip,perm=TRUE,B=10000, progBar=FALSE)$pval
library(Hotelling)
#
#  Get T2 statistic from original data
#
T2 <- hotelling.stat(Gipperton, PortPhillip)$statistic
T2
#
# Combine the data
#
X_comb <- rbind(Gipperton, PortPhillip)
#
#  Randomly split them into two groups of size 6 and 8, then compute stat
#
randomized_T2 <- rep(NA,2000)  # 2000 values to be simulated
for(i in 1:2000){
sample_row_index <- sample(1:14, size=6, replace=FALSE)
X1_temp <- X_comb[sample_row_index,]  # Sample 6 rows for X1_temp
X2_temp <- X_comb[-sample_row_index,] # Put the rest in X2_temp
randomized_T2[i] <- hotelling.stat(X1_temp, X2_temp)$statistic
}
hist(randomized_T2, n=30)
mean(randomized_T2 > T2)
data_mat <-structure(c(4, 5, 9, 10, 6, 4, 13, 4, 16, 14, 9, 2, 7, 6,
9, 16, 7, 7, 7, 9, 1, 15, 11, 20, 8, 5, 19, 16, 17, 18, 18, 18, 17,
20, 15, 29, 16, 14, 17, 17, 25, 17, 1, 12, 33, 26, 16, 3, 25, 7, 2,
30, 16, 24, 6, 3, 23, 24, 24, 15, 2.02, 3.54, 2.27, 4.97, 4.2, 3.15,
4.07, 3.3, 4.2, 4.55, 5.3, 3.86, 4.44, 5.65, 3.23, 6.4, 3.61, 4.63,
4.34, 3.58, 2.13, 5.1, 4.43, 5, 2.46, 2.77, 3.67, 5.67, 5.26, 5.03,
3.25, 5.21, 2.85, 3.87, 4.57, 4.79, 4.17, 4.91, 3.5, 3.42, 3.86, 3.45,
4.73, 2.77, 2.76, 2.67, 4.09, 3.46, 4.03, 3.23, 2.64, 5.92, 4.54, 3.55,
3.43, 4.2, 3.88, 3.59, 3.48, 5.66, 2.48, 6.57, 7.52, 11.47, 6.26, 4.83,
7.6, 9.54, 11.35, 9.96, 10, 7.4, 5.58, 8.91, 8.64, 10.77, 6.04, 9.28, 8.47,
5.72), .Dim = c(20L, 7L), .Dimnames = list(NULL, c("y1", "y2", "y3", "x1", "x2", "x3", "x4")))
data_mat
data_mat_scale <- scale(data_mat)
data_mat_scale
Y <- dist(data_mat_scale[,1:3], method="euclidean", diag=TRUE, upper=TRUE)
Y
X <- dist(data_mat_scale[,4:7], method="euclidean", diag=TRUE, upper=TRUE)
X
as.vector(X)
T <- cor(cbind(as.vector(Y), as.vector(X)))
T
T <- cor(cbind(as.vector(Y), as.vector(X)))[1,2]
T
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- data_mat_scale[,1:3]
for(i in 1:Nsim){
ind <- sample(1:20, size=20, replace=FALSE) #permutation
Y_rand <- Y[ind,]
E_rand_dist <- dist(Y_rand, method="euclidean", diag=TRUE, upper=TRUE)
null_dist[i] = cor(cbind(as.vector(X), as.vector(Y_rand_dist)))[1,2]
}
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- data_mat_scale[,1:3]
for(i in 1:Nsim){
ind <- sample(1:20, size=20, replace=FALSE) #permutation
Y_rand <- Y[ind,]
Y_rand_dist <- dist(Y_rand, method="euclidean", diag=TRUE, upper=TRUE)
null_dist[i] = cor(cbind(as.vector(X), as.vector(Y_rand_dist)))[1,2]
}
hist(null_dist, n=40, xlim=c(-0.4,1.0))
p_value <- mean((null_dist< -abs(T))|(null_dist> abs(T)))p_value
p_value <- mean((null_dist< -abs(T))|(null_dist> abs(T)))
p_value
mantel.rtest(X, Y)
load(ade4)
library(ade4)
mantel.rtest(X, Y)
mantel.rtest(as.dist(X), as.dist(Y))
library(vegan)
install.packages('vegan')
library(vegan)
Ymantel <- vegdist(data_mat_scale[,1:3], method = 'euclidean')
Xmantel <- vegdist(data_mat_scale[,4:7], method = 'euclidean')
mantel(Xmantel, Ymantel, method = 'pearson', permutations = 5000)
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- data_mat_scale[,1:3]
for(i in 1:Nsim){
null_dist[i] = cor(cbind(as.vector(X), Y_rand)[1,2] #Computing test statistic with permuted Y dist matrix
}
hist(null_dist, n=40, xlim=c(-0.4,1.0)) # Plotting null dist.
X
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- dist(data_mat_scale[,1:3], method="euclidean", diag=TRUE, upper=TRUE)
X <- dist(data_mat_scale[,4:7], method="euclidean", diag=TRUE, upper=TRUE)
for(i in 1:Nsim){
null_dist[i] = cor(cbind(as.vector(X), Y_rand)[1,2] #Computing test statistic with permuted Y dist matrix
}
hist(null_dist, n=40, xlim=c(-0.4,1.0)) # Plotting null dist.
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- dist(data_mat_scale[,1:3], method="euclidean", diag=TRUE, upper=TRUE)
X <- dist(data_mat_scale[,4:7], method="euclidean", diag=TRUE, upper=TRUE)
for(i in 1:Nsim){
Y_rand <- sample(as.vector(Y))
null_dist[i] = cor(cbind(as.vector(X), Y_rand))[1,2] #Computing test statistic with permuted Y dist matrix
}
hist(null_dist, n=40, xlim=c(-0.4,1.0)) # Plotting null dist.
p_value <- mean((null_dist< -abs(T))|(null_dist> abs(T)))
p_value
Ymantel <- vegdist(data_mat[,1:3], method = 'Bray')
Ymantel <- vegdist(data_mat[,1:3], method = 'bray')
mantel(Xmantel, Ymantel, method = 'pearson', permutations = 5000)
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- data_mat[,1:3]
for(i in 1:Nsim){
ind <- sample(1:20, size=20, replace=FALSE) #permutation of the 20 observations in dat_mat_scale
Y_rand <- Y[ind,] #Applying permutation to Y
Y_rand_dist <- dist(Y_rand, method="bray", diag=TRUE, upper=TRUE) #Computing permuted distance
null_dist[i] = cor(cbind(as.vector(X), as.vector(Y_rand)))[1,2] #Computing test statistic with permuted Y dist matrix
}
Ymantel
Nsim <- 5000
null_dist <- rep(NA,Nsim)
Y <- data_mat[,1:3]
for(i in 1:Nsim){
ind <- sample(1:20, size=20, replace=FALSE) #permutation of the 20 observations in dat_mat_scale
Y_rand <- Y[ind,] #Applying permutation to Y
Y_rand_dist <- vegdist(Y_rand, method = 'bray') #Computing permuted distance
null_dist[i] = cor(cbind(as.vector(X), as.vector(Y_rand)))[1,2] #Computing test statistic with permuted Y dist matrix
}
hist(null_dist, n=40, xlim=c(-0.4,1.0)) # Plotting null dist.
T <- 0.4251
p_value <- mean((null_dist< -abs(T))|(null_dist> abs(T)))
p_value
D <- structure(list(c(0, 0.089, 0.104, 0.161, 0.182, 0.232, 0.233, 0.249, 0.256, 0.273, 0.322, 0.308), c(0.089, 0, 0.106, 0.171, 0.189, 0.243, 0.251, 0.268, 0.249, 0.284, 0.321, 0.309), c(0.104, 0.106, 0, 0.166, 0.189, 0.237, 0.235, 0.262, 0.244, 0.271, 0.314, 0.293), c(0.161, 0.171, 0.166, 0, 0.188, 0.244, 0.247, 0.262, 0.241, 0.284, 0.303, 0.293), c(0.182, 0.189, 0.189, 0.188, 0, 0.247, 0.239, 0.257, 0.242, 0.269, 0.309, 0.296), c(0.232, 0.243, 0.237, 0.244, 0.247, 0, 0.036, 0.084, 0.124, 0.289, 0.314, 0.282), c(0.233, 0.251, 0.235, 0.247, 0.239, 0.036, 0, 0.093, 0.12, 0.293, 0.316, 0.289), c(0.249, 0.268, 0.262, 0.262, 0.257, 0.084, 0.093, 0, 0.123, 0.287, 0.311, 0.298), c(0.256, 0.249, 0.244, 0.241, 0.242, 0.124, 0.12, 0.123, 0, 0.287, 0.319, 0.287), c(0.273, 0.284, 0.271, 0.284, 0.269, 0.289, 0.293, 0.287, 0.287, 0, 0.32, 0.285), c(0.322, 0.321, 0.314, 0.303, 0.309, 0.314, 0.316, 0.311, 0.319, 0.32, 0, 0.252), c(0.308, 0.309, 0.293, 0.293, 0.296, 0.282, 0.289, 0.298, 0.287, 0.285, 0.252, 0)), class = "data.frame", row.names = c("HomoSapiens", "Pan", "Gorilla", "Pongo", "Hylobates", "MacacaFuscata", "MacacaMulatta", "MacacaFascicular", "MacacaSylvanus", "SaimiriSciureus", "TarsiusSyrichta", "LemurCatta"))
d
D
D
MDS <- cmdscale(D, k = 2)
MDS <- cmdscale(as.dist(D), k = 2)
MDS
plot(MDS, pch=19)
text(MDS[,1], MDS[,2], rownames(D), cex=0.4)
text(MDS[,1] + 30, MDS[,2], rownames(D), cex=0.4)
plot(MDS, pch=19)
text(MDS[,1]+30, MDS[,2], rownames(D), cex=0.4)
text(MDS[,1]+.01, MDS[,2], rownames(D), cex=0.4)
text(MDS[,1]+30, MDS[,2], rownames(D), cex=.8)
plot(MDS, pch=19)
text(MDS[,1]+.02, MDS[,2], rownames(D), cex=.8)
text(MDS[,1]+.01, MDS[,2], rownames(D), cex=.8)
plot(MDS, pch=19)
text(MDS[,1]+.01, MDS[,2], rownames(D), cex=.8)
text(MDS[,1]+.01, MDS[,2]+.01, rownames(D), cex=.8)
plot(MDS, pch=19)
text(MDS[,1]+.01, MDS[,2]+.01, rownames(D), cex=.8)
D
ad.dist(D)
as.dist(D)
View(MDS)
MDS$GOF
cmdscale(as.dist(D), k = 2)$GOF
cmdscale(as.dist(D), list=True, k = 2)$GOF
cmdscale(as.dist(D), list=TRUE, k = 2)$GOF
cmdscale(as.dist(D), list=TRUE, k = 3)$GOF
D
CMD <- cmdscale(as.dist(D), k = 2)
CMDGOF <- cmdscale(as.dist(D), list=TRUE, k = 2)$GOF
CMDGOF
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]+.01, MDS[,2]+.01, rownames(D), cex=.8)
text(MDS[,1]-.01, MDS[,2], rownames(D), cex=.8)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.01, MDS[,2], rownames(D), cex=.8)
text(MDS[,1]-.025, MDS[,2], rownames(D), cex=.8)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.025, MDS[,2], rownames(D), cex=.8)
text(MDS[,1]-.03, MDS[,2]+.2, rownames(D), cex=.8)
text(MDS[,1]-.025, MDS[,2], rownames(D), cex=.8)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.03, MDS[,2]+.2, rownames(D), cex=.8)
text(MDS[,1]-.03, MDS[,2]+.02, rownames(D), cex=.8)
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.8)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.8)
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.2)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.2)
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.4)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.4)
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.6)
plot(MDS, pch=19, xlim = c(-.20, .20), ylim = c(.10, -.25))
text(MDS[,1]-.03, MDS[,2]-.02, rownames(D), cex=.6)
CMD <- cmdscale(as.dist(D), k = 3)
library(car)
scatter3d(CMD)
scatter3d(x = CMD[,1], y = CMD[,2], z = CMD[,3] )
scatter3d(x = CMD[,1], y = CMD[,2], z = CMD[,3], surface = FALSE )
scatter3d(x = CMD[,1], y = CMD[,2], z = CMD[,3], surface = FALSE, labels = rownames(D) )
rownames(D)
CMD
scatter3d(x = CMD[,1], y = CMD[,2], z = CMD[,3], surface = FALSE, labels = rownames(CMD) )
scatter3d(x = CMD[,1], y = CMD[,2], z = CMD[,3], surface = FALSE, labels = rownames(CMD) )
X <- data_mat[,4:7]
summary(X)
pairs(X)
X
rep(1, 20)
Xtest <- colbind(X, rep(1, 20))
Xtest <- rowbind(X, rep(1, 20))
Xtest <- cbind(X, rep(1, 20))
Xtest
cor(Xtest)
cov(Xtest)
princomp(X)
princomp(X, cor = TRUE)
XScaledUP <- cbind(X[,1]*100, X[2,4])
princomp(XScaledUP)
princomp(XScaledUP, cor = TRUE)
XScaledUP
XScaledUP <- cbind(X[,1]*100, X[,[2,4])
XScaledUP <- cbind(X[,1]*100, X[,[2,4]])
XScaledUP <- cbind(X[,1]*100, X[,(2,4)])
XScaledUP <- cbind(X[,1]*100, X[,[2:4]])
XScaledUP <- cbind(X[,1]*100, X[,(2:4)])
princomp(XScaledUP)
princomp(XScaledUP, cor = TRUE)
summary(princomp(XScaledUP))
summary(princomp(XScaledUP, cor = TRUE))
summary(princomp(X))
summary(princomp(X, cor = TRUE))
X <- data_mat[,4:7]
hold = princomp(X, cor=TRUE, scores=TRUE)
names(hold)
hold$scores
hold$loadings
X
X[1,]
X[1,] %.% c(.52, .5, -.168,.672)
X[1,]*c(.52, .5, -.168,.672)
sum(X[1,]*c(.52, .5, -.168,.672))
M <-structure(c(-1.4, -1.09, -0.19, -0.09, 1.04, -0.5, -0.22, -1.65, -1.02,
0.71, 0.23, -0.48, -1.4, -1.2, -0.5, 0.19, 0.9, -0.59, -0.23, -1.9, -0.73,
0.84, 0.21, -0.46, -1.62, -1.02, 0.03, 0.18, 1.11, -0.62, -0.12, -1.45, -1.13,
0.93, 0.4, -0.52, -1.52, -1.11, -0.24, -0.9, 0.99, -0.38, -0.04, -1.54, -1.15,
0.37, 0.48, -0.35),
.Dim = c(12L, 4L), .Dimnames = list(NULL, c("X1", "X2", "X3", "X4")))
summary(princom(M, cor = TRUE))
summary(princon(M, cor = TRUE))
summary(princomp(M, cor = TRUE))
c(0.9556994*4, 0.03395396*4, 0.009426027*4, 0.0009206088*4)
sum(c(0.9556994*4, 0.03395396*4, 0.009426027*4, 0.0009206088*4))
setwd("~/Documents/Documents/College Work/Homework-Spring-2022/Multivariate Statistics/Homework #5")
library(readr)
divorce <- read_csv("divorce.csv")
View(divorce)
library(readr)
divorce <- read_delim("divorce.csv", delim = ";",
escape_double = FALSE, trim_ws = TRUE)
View(divorce)
head(divorce)
head(divorce)
summary(princomp(divorce))
PCA <- princomp(divorce)
PCA$loadings
Loadings <-PCA$loadings
View(Loadings)
view(Loadings)
Loadings[,1]
PCA <- princomp(divorce[,(1:54)])
PCA$loadings[,1]
biplot(PCA)
PCA$loadings[,2]
summary(PCA)
summary(PCA)
PCA$scores
PCA$scores[,1]
hist(PCA$scores[,1])
PCA$loadings[,1]
barplot(PCA$loadings[,1])
PCA$scores[,1]
divorce[,55]
as.vector(divorce[,55])
divorce <- cbind(divorce[,55], divorce[,(1:54)])
PCA$scores[,1]
